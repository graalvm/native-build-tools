/*
 * Copyright (c) 2021, 2021 Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
 * This file configures functional testing of the plugin.
 *
 * It will create 2 test suites that one can choose from:
 *
 * - a minimal test coverage suite only testing the current version of Gradle
 * - a full test suite verifying the behavior will all supported versions of Gradle
 */

plugins {
    id 'groovy'
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest
}

configurations {
    // This configuration will trigger the composite build
    // which builds the JUnit native library, and publish it to a repository
    // which can then be injected into tests
    functionalTestCommonRepository {
        canBeResolved = true
        canBeConsumed = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "repository"))
        }
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

def graalVm = javaToolchains.launcherFor {
    languageVersion.set(JavaLanguageVersion.of(11))
    vendor.set(JvmVendorSpec.matching("GraalVM"))
}

['functionalTest', 'fullFunctionalTest', 'configCacheFunctionalTest'].each {
    // Add a task to run the functional tests
    tasks.register(it, Test) {
        // Any change to samples invalidates functional tests
        inputs.files(files("src/samples"))
        inputs.files(configurations.functionalTestCommonRepository)
        systemProperty('common.repo.url', configurations.functionalTestCommonRepository.incoming.files.files[0])
        systemProperty('versions.junit', libs.versions.junitJupiter.get())
        environment('GRAALVM_HOME', graalVm.forUseAtConfigurationTime().get().metadata.installationPath.asFile.absolutePath)
        testClassesDirs = sourceSets.functionalTest.output.classesDirs
        classpath = sourceSets.functionalTest.runtimeClasspath
        javaLauncher.set(graalVm)
    }
}

tasks.named('fullFunctionalTest') {
    systemProperty('full.coverage', 'true')
}

tasks.named('configCacheFunctionalTest') {
    systemProperty('config.cache', 'true')
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.fullFunctionalTest)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
