/*
 * Copyright (c) 2021, 2021 Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
 * This file configures publishing for interoperability with other
 * Gradle builds. In particular, the Gradle plugin requires the JUnit
 * library produced by this build, but it needs it in the form of
 * a Maven repository because it's going to be consumed from integration
 * tests.
 *
 * This means that the traditional composite build system which allows
 * subsistuing a binary dependency with a source dependency isn't sufficient
 * in this case.
 *
 */

plugins.withId('maven-publish') {
    // This is the location where we will generate a local repository
    // containing the JUnit library. We DON'T use mavenLocal() because
    // this repository requires manual publishing and is considered a
    // bad practice because it's unreliable wrt reproducibible builds
    def repoDirectory = providers.systemProperty("commonRepoPath")
            .forUseAtConfigurationTime()
            .orElse(layout.buildDirectory.dir("repo"))
            .forUseAtConfigurationTime()

    configurations {
        // Configure an outgoing configuration which artifact
        // is going to be the local Maven repository we generate
        repositoryElements {
            canBeConsumed = true
            canBeResolved = false
            attributes {
                attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, "repository"))
            }
            outgoing {
                artifact(repoDirectory) {
                    builtBy { tasks.named("publishMavenJavaPublicationToCommonRepository") }
                }
            }
        }
    }

    // Register a new software component which is used to "publish" the repository
    // and is visible via composite builds
    def softwareComponentFactory = objects.newInstance(Services).softwareComponentFactory
    def adhoc = softwareComponentFactory.adhoc("commonRepository")
    adhoc.addVariantsFromConfiguration(configurations.repositoryElements) {
        mapToOptional()
    }

    publishing {
        repositories {
            maven {
                name = "common"
                url = repoDirectory
            }
        }
    }

    // This is a performance optimization: publishing is only required
    // if we actually changed the artifact
    tasks.matching { it.name == "publishMavenJavaPublicationToCommonRepository" }.configureEach { t ->
        t.outputs.upToDateWhen {
            !tasks.jar.didWork && file(repoDirectory.get()).exists()
        }
    }
}

// Get a handle on the software component factory
interface Services {
    @javax.inject.Inject
    SoftwareComponentFactory getSoftwareComponentFactory()
}
