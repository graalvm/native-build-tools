/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tests;

import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.FieldSource;
import tests.common.TestInterface;


import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;


public class JUnitAnnotationsTests implements TestInterface {

    /* test Disabled tests */
    @Test
    @Disabled
    void skipThisTest() {
        throw new RuntimeException("This test should not be executed!");
    }

    /* test MethodSource with Interface */
    @ParameterizedTest
    @MethodSource("names")
    void test(String name) {
        assertEquals(5, name.length());
        assertTrue(name.startsWith("S"));
    }

    /* test FieldSource with other class */
    @ParameterizedTest
    @FieldSource("tests.common.Fruits#fruits")
    void testWithExternalFieldSource(String fruit) {
        assertTrue(fruit.contains("berry"));
    }


    /* test FieldSource with field from this class */
    static final List<String> listOfFruits = Arrays.asList("apple", "ananas");

    @ParameterizedTest
    @FieldSource("listOfFruits")
    void singleFieldSource(String fruit) {
        assertTrue(fruit.startsWith("a"));
    }


    /* test RepeatedTest */
    private static int numberOfRepetitions = -1;

    @BeforeAll
    static void initializeNumberOfRepetitions() {
        /* if we don't execute this first, repeated tests will fail */
        numberOfRepetitions = 1;
    }

    @AfterAll
    static void checkIfThisComesLast() {
        /* if this comes last, 3 repeated tests should have increased this value to 4 */
        assertEquals(4, numberOfRepetitions);
    }

    @RepeatedTest(3)
    void repeatedTest(RepetitionInfo repetitionInfo) {
        assertEquals(repetitionInfo.getCurrentRepetition(), numberOfRepetitions);
        numberOfRepetitions++;
    }

    /* test BeforeEach and AfterEach annotations */
    private static int beforeEachTestValue = -1;
    private static int afterEachTestValue = -1;

    @BeforeEach
    void setBeforeEach() {
        beforeEachTestValue = 0;
    }

    @AfterEach
    void setAfterEach() {
        afterEachTestValue = -1;
    }

    @Test
    void beforeAndAfterEachTest1() {
        assertEquals(0, beforeEachTestValue);
        assertEquals(-1, afterEachTestValue);
        beforeEachTestValue = (int) (Math.random() * 10 + 1);
        afterEachTestValue = (int) (Math.random() * 10 + 1);
    }

    @Test
    void beforeAndAfterEachTest2() {
        assertEquals(0, beforeEachTestValue);
        assertEquals(-1, afterEachTestValue);
        beforeEachTestValue = (int) (Math.random() * 10 + 1);
        afterEachTestValue = (int) (Math.random() * 10 + 1);
    }

    @Test
    void beforeAndAfterEachTest3() {
        assertEquals(0, beforeEachTestValue);
        assertEquals(-1, afterEachTestValue);
        beforeEachTestValue = (int) (Math.random() * 10 + 1);
        afterEachTestValue = (int) (Math.random() * 10 + 1);
    }

}
